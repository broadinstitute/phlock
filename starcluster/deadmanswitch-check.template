#!/usr/bin/python

# run per node to check for heartbeat
import time
import socket
import boto.sns
import boto.sdb
import os

def get_last_heartbeat(region, key, secret, domain):
    sdbc = boto.sdb.connect_to_region(region,
       aws_access_key_id=key,
       aws_secret_access_key=secret)

    dom = sdbc.get_domain(domain, validate=False)
    item = dom.get_item('heartbeat')
    if item == None:
        return None
    return float(item['timestamp'])

def send_alert(region, key, secret, topic, message):
    snsc = boto.sns.connect_to_region(region,
       aws_access_key_id=key,
       aws_secret_access_key=secret)
    
    print "sending alert to %s" % repr(snsc)
    
    return snsc.publish(topic, message, "Notification from cluster's deadman's switch")

def get_uptime():
    with open('/proc/uptime', 'r') as f:
      return float(f.readline().split()[0])

def poll(cluster, region, key, secret, domain, topic, max_time_since_heartbeat):
    msg = None

    timestamp = get_last_heartbeat(region, key, secret, domain)
    now = time.time()
    shutdown = False
    uptime = get_uptime()
    if timestamp == None:
        msg = "Could not find last heartbeat"
    elif now < (timestamp - 60):
        msg = "Got timestamp from the future: now=%s, timestamp=%s" % (now, timestamp)
    elif ((now - timestamp) > 2*max_time_since_heartbeat) and uptime > max_time_since_heartbeat:
        msg = "Last heartbeat was very old!  Shutting down.  (Last heartbeat is %.1f minutes old)" % ((now-timestamp)/60.0)
        shutdown = True
    elif (now - timestamp) > max_time_since_heartbeat:
        msg = "Last heartbeat is %.1f seconds old" % ((now-timestamp)/60.0)

    if msg != None:
        return send_alert(region, key, secret, topic, "Message from %s:\n\nWas %s cluster left on by accident?\nHeartbeat check failed due to: %s" % (socket.getfqdn(), cluster, msg))
    
    if shutdown:
        os.system("shutdown -h now")

key="{key}"
secret="{secret}"
topic="{topic}"
domain="{domain}"
region="{region}"
cluster_name="{cluster_name}"

poll(cluster_name, region, key, secret, domain, topic, 60*30)

